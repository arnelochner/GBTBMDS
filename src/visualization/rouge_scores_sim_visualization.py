
import numpy as np



from matplotlib import pyplot as plt


def slice_rouge(scores, example, rouge_meta, stack=True):
    """
    Remove padding in rouge score array for a given example.
    @param scores: rouge scores (padded)
    @param example: example to process
    @param rouge_meta: meta data from rouge processing
    @param stack: stack all paragraph sentences (or return list for each paragraph)
    @return: rouge scores of size (total_paragraph_sentences, summary_sentences) (stacked)
             or [(paragraph_sentences), summary_sentences)] for each paragraph
    """
    scores_example = scores[example]
    patches = [scores_example[para, :rouge_meta[example]["paragraph_sentences"][para],
               :rouge_meta[example]["summary_sentences"]]
               for para in range(rouge_meta[example]["paragraphs"])]
    if stack:
        img = np.vstack(patches)
        return img
    return patches


def plot_rouge(scores, input_meta, rouge_meta, score=1, cmap="hot", max_num_generated_sentences=100, max_num_input_paragraphs=30):
    """
    Plot rouge scores between paragraph sentences and summary sentences (for a single example) as heatmap.
    Document boundaries and paragraph boundaries are marked as vertical lines.
    @param scores: rouge scores
    @param input_meta: meta data from preprocessing script (number of textual units)
    @param rouge_meta: meta data from rouge processing (number of sentences per paragraph)
    @param score: plot ROUGE-1, ROUGE-2 or ROUGE-L
    @param cmap: color map for plot
    @param max_num_generated_sentences: Maximal number of sentences generated by graphsum
    @param max_num_input_paragraphs: Maximal number of paragraphs for each input example
    """

    rouge_dict = {0: "1", 1: "2", 2: "L"}
    #fig, ax = plt.subplots(figsize=(20, 10))
    
    sentence_information = np.zeros(shape=[max_num_generated_sentences])
    
    histo = np.zeros((max_num_input_paragraphs, max_num_generated_sentences))
    
    for ex in range(len(input_meta["number_of_textual_units"])):

        img = slice_rouge(scores, ex, rouge_meta)




        number_of_paragraphs_each_document = np.cumsum([0] + list(input_meta["number_of_textual_units"][ex]))

        sentence_cumsum = [0] + list(np.cumsum(rouge_meta[ex]["paragraph_sentences"]))

        number_of_documents = np.where(number_of_paragraphs_each_document == rouge_meta[ex]["paragraphs"])[0][1]



 

        for i in range(number_of_documents-1):

            document_start = number_of_paragraphs_each_document[i]
            document_ending = number_of_paragraphs_each_document[i+1]

            #print(f"document_start: {document_start} | document_ending: {document_ending}")
            sentence_start = sentence_cumsum[document_start]
            sentence_ending = sentence_cumsum[document_ending]
            
            sentence_information[sentence_ending-sentence_start] += 1

            #print(f"sentence_start: {sentence_start} | sentence_ending: {sentence_ending}")
            relevent_scores = img[sentence_start:sentence_ending,:,score].T

            for j, x in enumerate(np.argmax(relevent_scores, axis=1)):
                    histo[j, x] += 1
        
    histo = histo / (np.cumsum(sentence_information[::-1])[::-1] + np.e**-15)
    
    
    histo = histo/(histo.sum(axis=1) + np.e**-15)[:, np.newaxis]
    
    plt.imshow(histo[:20,:20].T)
    plt.xlabel("Generated Sentences")
    plt.ylabel("Input Sentences")
    plt.colorbar()






def plot_attention_rouge_correlation(corr, r1, r2, rl , attentions, decoding_layer=0, is_aggregated=False):
    """
    Plot correlation between rouge scores and attention weights over all examples.
    @param corr: correlation_matrix
    @param r1: list of r1 scores
    @param r2: list of r2 scores
    @param r1: list of rl scores
    @param attentions: list of attention weights
    @decoding_layer: Number of Decoding layer to visualize
    @is_aggregated: Bool Flag if the correlation matrix was created by aggregating multiple decoding layers

    """
    
    
    if is_aggregated:
        corr_r1 = corr[1]
        corr_r2 = corr[2]
        corr_rl = corr[3]
    else:
        corr_r1 = corr[decoding_layer, 1]
        corr_r2 = corr[decoding_layer, 2]
        corr_rl = corr[decoding_layer, 3]

    plt.figure(figsize=(20, 10))
    plt.title(f"Correlation to ROUGE-F(1/2/L) for Decoding-Layer {decoding_layer}: {corr_r1:.2f} / {corr_r2:.2f} / {corr_rl:.2f}")
    plt.scatter(r1, attentions, label="ROUGE 1")
    plt.scatter(r2, attentions, label="ROUGE 2")
    plt.scatter(rl, attentions, label="ROUGE L")
    plt.xlabel("ROGUE-Scores")
    plt.ylabel("Global Attention Weights")
    plt.legend()




